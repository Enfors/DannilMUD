* Technical design
** Conventions
*** Directories
Directories should have short, logical names that make them easy to
remember, and make paths short. All lowercase letters. Words are
separated with an underscore.

*** Files
All filenames (except README-files and the like) should consist of all
lowercase letters (as well as underscores and such as necessary).

Module file names start with "m_", followed by the module name.

*** Classes
Class names consist of a series of one or more words, where the first
letter of each word is capitalized. The rest of the letters are
lowercase. Example: UserManager

*** Objects
Object names consist of one or more all lowercase words, separated by
underscores. Example: user_manager

*** Functions
Function names consist of one or more all lowercase words, separated
by underscores. Example: send_message. Class functions that are
"private" - meant to only be called from within the object that
defines them - have a name beginning with an underscore. Only other
member functions in the same class are allowed to call such functions.

*** Variables
Variable names consist of one or more all lowercase words, separated
by underscores. Example: user_name

The same rules apply to private (internal) variables, but their names
are prepended by two underscores. Example: __user_name

** File and module structure
** Code architecture
*** Overview
*** Code components
**** Startup
**** Network
**** Data storage
All objects that need to store data on secondary storage use a
dictionary for that data. DM implements the ability to save and load
this dictionary.

**** Command handling
**** Combat
**** NPC AI
**** Game daemons
***** Plant handling
***** Weather
*** The main loop
**** Terminology
| Term       | Description                                      |
|------------+--------------------------------------------------|
| Tick       | Each iteration of the main loop is called a tick |
| Heart beat | Function called in objects each tick             | 
  
**** Variables
| Variable        | Description                                    |
|-----------------+------------------------------------------------|
| tick_len        | How long between each tick (2000 milisec)      |
| num_heart_beats | Number of objects with registered heart_beats  |
| tick_start_time | The time when this tick started                |
| tick_end_time   | The time when this tick is supposed to be done |

**** Pseudocode
- Every tick (tick length = tick_len):
  - Store current_time() in tick_start_time
  - Set tick_end_time = tick_start_time + tick_len
  - Until all object ticks are handled:
    - While network traffic in queue:
      - Hande one traffic event
    - Handle 10 object heart beats
  - While current_time() is less than tick_end_time():
    - Wait for network traffic (timeout = tick_end_time - current_time())
*** Game objects
Game objects are objects that appear in the game, such as room,
weapons, characters, monsters, clothes, and so on.

**** Properties
All game objects have a set of properties, called props, stored in a
dictionary. Each prop has a name (key) and a value.

***** Weight
Weight is measured in units of 10 grams. So, one kilogram is 100.

***** Bulk
Bulk measures how "bulky" an object is, as in how much empty space
it needs in a bag in order to fit.

| Bulk | Example object         |
|------+------------------------|
|    1 | Acorn                  |
|    5 | Golf ball-sized stone  |
|   20 | Fist-sized stone       |
|   50 | Helmet                 |
|   80 | Short sword            |
|  100 | Short bow              |
|  120 | Long sword             |
|  140 | Long bow, breast plate |

**** The game object class tree
All game objects are objects of a class that inherits from a class in
the game object class tree (the GOCT, for short). The root of the GOCT
is the "object" class. Game object classes can inherit from any class
in the GOCT, not just the leaves.

A game object can never change which class in the GOCT that it
inherits from. Therefore, care must be taken when adding classes to
the GOCT so that an game object will never suffer because it can't
change its parent. For example, if the roof collapses in a house, that
room will change from being "indoors" to "outdoors". Since this is a
change that must be allowed, there can never be separate classes for
indoor and outdoor rooms. Instead, that should be controlled by an
attribute in the "room" class.

Likewise, a humanoid druid could conceivably transform himself into a
bear. Therefore, "humanoid" should not be a class in the GOCT.

***** Base

| Prop   | Description                             |
|--------+-----------------------------------------|
| bulk   | How bulky the object is                 |
| weight | How much it weighs (100 = 1 kg)         |
| short  | Short description, shown in environment |
| long   | Long description, shown when examined   | 
  
****** Container
| Prop       | Description                         |
|------------+-------------------------------------|
| bulk_cap   | How much bulk fits in the container |
| weight_cap | How much weight can it handle       |
  
******* Room
| Prop  | Description                                          |
|-------+------------------------------------------------------|
| exits | Dict of directions, pointing to destination rooms    |
| light | How light or dark it is. 10 = daylight, 0 = no light |

******* Body
| Prop | Description |
|------+-------------|
|      |             | 

******** User char
| Prop | Description |
|------+-------------|
|      |             | 

******** NPC
| Prop | Description |
|------+-------------|
|      |             | 

****** Equipment
| Prop | Description |
|------+-------------|
|      |             | 
  
******* Wearable
| Prop | Description |
|------+-------------|
|      |             | 

******** Armour
| Prop | Description |
|------+-------------|
|      |             | 

******** Clothing
| Prop | Description |
|------+-------------|
|      |             | 

******* Weapon
| Prop | Description |
|------+-------------|
|      |             | 

******** Ranged_weapon
| Prop | Description |
|------+-------------|
|      |             | 

******** Melee_weapon
| Prop | Description |
|------+-------------|
|      |             | 

***** Modules
Modules are files containing classes used to modify the nature of
an object. They are meant to be used with multiple inheritance, where
the first inheritance is the "proper" parent, and the module classes
are the consequtive parents.

For example, "sword" is a "proper" parent. So is "torch". The torch
uses the m_light_source module to provide the light. So, Torch uses
the Equipment class as its proper (first) parent, and LightSource as
its second parent.

Why can't Torch use LightSource as its proper (first) parent? Well, we
might want to have a magical sword at some point, which aside from
being a weapon is also a light source. So, this sword must have Sword
as its "proper" (first) parent - it can't have LightSource, or it
wouldn't be a sword. Therefore, LightSource is used as a module, being
inherited from as the second parent.

*** Events
Messages (plain text) needs to be transmitted between different game
objects to report in-game occurances. These occurances are called
events.

**** Event class hierarchy
- Evt
  - ComEvt (Communication Event)
    - SayEvt
    - EmoteEvt
    - TellEvt
  - ActionEvt
    - MoveEvt
      - EnterEvt
      - LeaveEvt
    - CombatEvt

**** The broadcast bool
The broadcast affects to whom the event is shown.

- Off: Only sent to the doer and target (if set).
- On: Broadcast to the rooms of the doer and the target.

*** Daemons
**** The update daemon
The update daemon's sole purpose in life is to make it possible to
update code while the game is running. Each time the driver needs an
(updatable) object - such as the command parser, for example - it
asks the update daemon for it. So, to update the command parser after
having changed the code, we ask the update daemon to reload it. Then,
the next time the driver asks the update daemon for the command parser,
the update daemon hands over the newest version of it.

***** A day in the life of the update daemon
1. Be initialized by the driver.
2. Wait for requests:
   1. If a request for an object arrives:
      1. If the object is not available in the cache, load it, cache
         it and return it.
      2. If the object is available in the cache, return it.
   2. If an update request arrives, reload the specified code
      and store a pointer to it in a cache.

**** The command parser
When the command parser initializes, it imports all commands in each
command directory except files named "base", and instantiates the Cmd
class in each of them.

There are different directories where commands reside.

| Directory  | Description                        |
|------------+------------------------------------|
| cmd/player | Commands available to all users    |
| cmd/wiz    | Commands available only to wizards |
| cmd/admin  | Commands available only to admins  |
  
***** Parsing algorithm
The parser works with two sets of data.

1. The input from a user, and
2. The parsing rules for each command.

****** Parsing rules
Parsing rules look like this:

- look
- look at OBJ
- give OBJ to LIV
- say STR

The words in capital letters (OBJ, LIV, STR) are tokens.

****** Tokens
******* OBJ
OBJ matches an object. It can have any of the following forms:

- (the) (Nth) (adjective) object_name

The words within parenthesis are optional, and can appear in any combination,
but only in that order.

******* LIV
LIV represents a living body. It will match anything in the environment
or within the user which is considered to be living.

******* STR
STR will match any arbitrary string, including spaces.

****** The algorithm
1. Find a command that matches the first word in the input.
2. Strip away the command from the input.
3. Foreach of that command's rules:
   1. Check if the rule matches the input.
      1. Foreach word (token / plain) in the rule:
	 1. Check if it matches the first part of the input.
	    1. If it matches, strip that part away and continue with the
	       next word in the rule.
	    2. If it doesn't match, then return; this rule doesn't match.
      2. Check if there is still input left.
	 1. If there is not, then the rule matches the input. Return
	    successfully.
	 2. If there is still input, then return failure; this rule doesn't
	    match the input.
4. Call the the function in the command that corresponds to the
   matching rule.
*** World
**** Rooms
***** Room coordinates, paths and file names
To identify and load a room, we need the following:
| Name      | Description                                              |
|-----------+----------------------------------------------------------|
| code_file | The file containing the code for the room (obj/dig_room) |
| area_path | The dir the rooms are saved in                           |
| coords    | The coordinates for the room                             |

These values are need:
1) When loading a room from disc. They are supplied as arguments 1, 2
   and 3, respectively.
2) When adding an exit, so the other room can be identified and
   loaded. They are supplied as arguments after the direction to the
   add_exit() function.



world.ooc.mansion.-1,-3,2
\-------+-------/ \--+--/
        |            |
    area_path      coords

**** Area creation
1. To create an area, first you create a directory for it (probably
   under the world directory).
2. Next step is to create the first room. This is done with the
   command "mkroom", which takes the area's path as an argument.
3. The newly created room saves its path. This is needed to create
   exits.
4. To create additional rooms, stand in the first room and type
   "dig DIR".

*** Users
**** User logout
When a user logs out, the following needs to happen:

- User removed from room :: user_char.end() -> base.end()
- Stop polling :: con.end()
- User removed from who list
- Send "leave the game" event.
- Tell connection to close after write
- Wait for write to finish

***** Involved code sections
- user_char.end()
- user_man.end_user()
- con.end()
- quit()

***** Functions that need calling
- user_char.end()
  - 

***** Current procedure
Existing procedure:
- quit()
  - user_char.end()
    - body.end()
      - (fallthrough to super) base.end()
	- Remove user object from room
    - user_char.close_con()
      - con.end_after_write()
	- con.end()
	  - con._dont_watch_anything()
	  - con_man.end_con()
	    - delete sockets from watchlist
	    - delete con from cons list
	    - user_char.con_closed()
	      - user_man.end_user()
		- remove user from who list
		- #user_char.end() # <-- Recursion! Commented out.
	  - sock.shutdown()
	  - sock.close()
	- con.end_after_write = True
  - Send "left the game" to others

**** User age
***** Procedure
- At login
  - last_login = now
- When age is requested
- At logout
  - stored_age = stored_age + now - last_login

** Class tree
*** base
**** container
***** living
****** body
** Relationship between DannilMUD and HollowTreeMUD
I'm currently leaning towards not dividing the game into "driver" and
"mudlib". The advantage of the division would be that it would be
easier to make another game after HollowTreeMUD, but that's unlikely
to ever happen. The disadvantage would be that it would create an
artificial barrier in the code, with some parts of the code on one
side, and the rest of the code on the other side. That would make
coding more difficult.

Therefore, I'm marking the following subsections as obsolete.

*** DannilMUD (obsolete)
DannilMUD is the driver. It doesn't contain a game, just the ability
to make and run one. DannilMUD knows what rooms, characters, objects,
weapons etc are, but it doesn't contain any of them. It also has a
generic combat system that is not tied to any specific theme.

The driver needs a config file. This config file tells the driver
where to find the mudlib directory, among other things. If you change
this to point to another mudlib and restart the driver, a totally
different game will be loaded - different characters, different world,
and so on.

The driver contains code to handle rooms, inventory, messages and
such. It also provides some basic commands like "say", "go", and
"quit". The mudlib provides the rest of the commands.

**** Characters
***** Skill system
The driver contains the skill system, but no skills.

*** Hollow Tree MUD (obsolete)
Hollow Tree MUD is the game. It is referred to as a "mudlib", like in
LP-MUDs. It contains the actual rooms, fantasy weapons, spells, etc
that are part of the game.

The mudlib consists of a directory. Inside it, is a file called
config.txt. It contains the name of the game, and the port number to
listen to (among other things).

Since the driver only provides a very limited array of commands, it is
up the mudlib to provide the rest.

*** TODO Draw line between driver and lib (obsolete)
Where do I draw the line between driver and lib when it comes to
skills? Are all skills in the lib, and just the skill system in the
driver? Probably, yes.


* Game design
** Intro to game mechanics
The game attempts to mimic the feel of pen & paper roleplaying games
as much as reasonably possible. Therefore, the game emulates actual
dice (d2, d3, d4, d6, d10 and d20) when random numbers are needed.

In most cases, it is advantageous for players to roll low numbers when
making dice rolls. The typical case is making a skill roll by rolling
a d20, which is successful if the result is equal to or less than the
player's skill value. Rolloing for damage is an exception though - in
this case the player wants high numbers.

** Characters
*** Stats
Stats are intrinsic values that all characters have. They are
different from skills in that skills are something you learn.

Stat values range from 0 and upwards without a set maximum. The
typical average value for a humanoid is 10.

**** Stat rolls and modifiers
When a stat roll is made, a modifier is used. The modifier represents
the difficulty of this particular task. A positive modifier means that
the task is relatively easiy, while a negative modifier means that the
task is relatively difficult. To make a stat roll, roll 3d6. If the
result is lower than or equal to the character's skill value plus the
modifier (which is pytically between -10 and +10), then the roll was a
success. In other words:

  - result = stat value + modifier - 3d6

If the result is a positive number or zero, the stat roll succeeds by
that many points. Otherwise, it fails.

**** Agility
How "flexible" the character's body is. Not sure if I want to keep
this stat thought. I'm not sure if any significan amount of skills
would be connected to it.

**** Dexterity
"Body skill", so to speak; determines how skilled the character is in
using his body in various ways.

**** Endurance
Determines how long the character can perform manual labor without
becoming exhausted.

**** Constitution
Determines how much damage a character can take without dying.

**** Strength
Determines how strong the character is.

**** Perception
Determines the character's ability to preceive things in his
surroundings.

**** Focus
Determines the character's ability to concentrate.

**** Intelligence
How intelligen the character is.

**** Wisdom
Determines how much the character knows. Due to the fact that I'm
planning to implement a knowledge system that keeps track of exactly
what a character knows, it's bebatable whether or not to keep this
stat. But the knowledge system can't possibly contain everything, so I
might keep this stat anyway.
     
*** Skills
Skill values range from 0 (don't have the skill) to a maximum of 20.

**** Skill roll (sr) and mofidiers
When a skill roll is made, a modifier is used. The modifier represents
the difficulty of this particular task. A positive modifier means that
the task is relatively easy, while a negative modifier means that the
task is relatively difficult. To make a skill roll, roll 3d6. If the
result is lower than or equal to the character's skill value plus the
modifier (which is typically between -10 and +10), then the roll was a
sucess. In other words:

  - result = skill value + modifier - 3d6

If result is a positive number or zero, the skill roll succeeds by
that many points. Otherwise, it fails.

**** Combined skill rolls
Sometimes an activity takes many skills. For example, swinging a sword
takes two skills - the "Swing" (action) skill, and the "Sword"
(weapon) skill. In that case, a skill roll is performed for each skill
involved and the lowest result is the result of the combined skill
roll. So in the above example, if the "Swing" skill roll result is 5
and the "Sword" skill roll result is 2, then the combined skill roll
result is 2 - the lower of the two.

A combined skill roll may involve more than two skills.

**** Skill costs
| Stat | Very easy | Easy | Average | Hard | Very hard |
|------+-----------+------+---------+------+-----------|
|   -6 |           |      |         |      |         1 |
|   -5 |           |      |         |    1 |         1 |
|   -4 |           |      |       1 |    1 |         2 |
|   -3 |           |    1 |       1 |    2 |         2 |
|   -2 |         1 |    1 |       2 |    2 |         2 |
|   -1 |         1 |    2 |       2 |    2 |         3 |
|    0 |         2 |    2 |       2 |    3 |         3 |
|   +1 |         2 |    2 |       3 |    3 |         4 |
|   +2 |         2 |    3 |       3 |    4 |         5 |
|   +3 |         3 |    3 |       4 |    5 |         6 |
|   +4 |         3 |    4 |       5 |    6 |         8 |
|   +5 |         4 |    5 |       6 |    8 |        10 |
|   +6 |         5 |    6 |       8 |   10 |        13 |
|   +7 |         6 |    8 |      10 |   13 |        17 |

** Combat
*** Basic combat mechanics
Combat is turn based. At each turn, all combatants have 30 seconds to
decide what they want to attempt to do, and then combat is resolved
and the result is displayed. Different kind of activities take
different amounts of time to perform (a thrust with a sword is faster
than drawing and shooting an arrow).

To explain fully how combat works, I will first explain a simplified
model of the system. Then I will gradually add more and more details
in the following sections.

*** Actions
Each turn, the combatants can choose one Action. An Action could be
thrusting or swinging a sword, parrying, drinking a potion, casting a
spell or a number of other similar activities. The trick is to try to
be faster than your opponent - if your attack is faster than your
opponent's Parry, then your attack will be successful. Actions have
different base times, which affect how long they take. Your skills
(values between 1 and 20, where 20 is the best) will also affect how
quickly your Actions resolve.

Let's examine how long it would take you to perform a sword thrust.
First, you must make a Skill Roll (d20 is a twenty-sided die):

  SkillRoll = SkillValue + StatModifier - 2d10

Then, we can compute how long the thrust Action will take:

  completion_time = 40 + ThrustBaseTime - SkillRoll

Similarly, if you opponent attempts to parry at the same time:

  completion_time = 40 + ParryBaseTime - SkillRoll

If the completion_time of the opponent's parry is lower than the
completion_time of your thrust, he will have successfully parried
your attack. Otherwise, your attack hits.

*** Balance
Now, let's add the concept of Balance. Balance is a value between 1
and 20. If your Balance is 20, you're at perfect balance. If it's 1,
you're totally off balance. Your Balance is always added to your
Actions' comletion_time, so the better your Balance is, the faster
your Actions will be. All Actions will cause you to lose an amount
of Balance depending on the nature of the Action. Swinging a heavy
sword will cause you to lose more Balance than shooting a bow.

So let's add Balance to the completion_time formula:

  completion_time = 40 + ThrustBaseTime + Balance - SkillRoll

Generally speaking, attacking Actions take longer to complete (they
have longer BaseTimes) than defensive ones. Since your Balance affect
how long your Actions take to complete, attacks are unlikely to hit
(read: resolve before the opponent's Parry does) unless you have a
Balance advantage (given equal opponents on other respects). But after
your attack, your opponent is likely to have better Balance than you
since his defense cost less Balance than your attack did. This means
he will probably attack now, so it's probably a good idea for you to
Parry now.

This way, opponents typically "take turns" attacking each other.

*** Distance and movement
The game keeps track of the distance between you and your opponent(s).
The distances are as follows:

- 1: short

- 2: average

- 3: long

- 4: very long

The distance between you and your opponent affect which Actions can
be taken, as well as which weapons are able to reach your opponent.
To change the distance between you and your opponent, we must
introduce the concept of Movement.

As has been previously explained, all combatants can take one Action
per turn. But it is also possible to choose one Movement as well,
which will be resolved before your Action. The basic Movements are as
follows:

- Charge: Moves you all the way to your oppoent, setting the distance
to "short" and giving you an attack bonus and defense penalty, both
lasting until the end of the turn.

- Advance: moves you one step closer to your opponent.

- Retreat: moves you one step away from your opponent.

- Flee: moves you as far away as possible from your opponent, setting
the distance to "very long".

There are Actions that can be taken that attempt to limit your opponent's
Movements. Let's say you have a spear, and your opponent has a shortsword.
Since your spear has a longer reach (read: can successfully hit from longer
distances) than your oppoent's shortsword, you can use Actions that try
to prevent him from closing the distance. However, your opponent is likely
to try to out-maneuver you and use Actions that attempts to "brush aside"
your spear so that he can use Movements to get closer to you. 

*** Combat mode
When someone is attacked, the room they're in enters Combat mode. This
means that time "slows down" in that room, so that the heart beats of
the characters in the room occur at the end of each combat turn,
instead of every two seconds which is the normal out-of-combat heart
beat rate. This is what prevents characters from completing multiple
Actions in the same turn since you cannot perform more than one Action
per heart beat.  Remember, not all Actions are strictly combat
Actions - for example, a potion could be drunk in combat and out of
combat. Some Actions are strictly Combat Actions though and when they
are invoked outside of combat, combat mode is initiated in the room.

*** Targetting
Before you can attack someone, you must target them. Targeting is an
Combat Action, meaning the room will enter combat mode if it's not
already active in the room when the command is issued. Targeting
commands are always resolved at the end of the turn after all other
Combat Actions have been resolved. Also, you are always notified when
someone targets you. Because of this, you can never be attacked
completely out of the blue - you will always get the chance to at
least issue a parry or dodge Action to defend yourself.

However, when someone targets you (which will occur at the end of a
round), you will not be able to take an offensive Action towards them
in the consecutive turn (you will still be able to take offensive
action against someone else who is your current target). If someone
targets you and you don't have an active target, your attacker will
automatically become your target.

Let's look at an example.

An attacker targets a defender by typing "target defender" in a room
where no combat is currently taking place.

Since the defender didn't already have a target, the attacker now
becomes the defender's target. Combat is now initiated, and round one
starts. The combatants are asked to choose their Actions and
Movements.

Since the attacker targeted the defender in the previous (non-combat)
turn, the defender can not try to hit the attacker in this turn. The
defender has to take a defensive Action such as parry or dodge
instead. This means that the attacker gets to make the first attack.

So, even if the attacker was prevented from outright hitting the
defender without the defender being able to even try to parry or
dodge, the attacker is still granted the right to attack first.

*** Sizes and fighting multiple targets
All characters have a size. The default size for human males is 10,
and 10 for females.

Because of space constraints, there is a limit to how many people can
attack you at the same time. That limit is your size times 3. If your size
is 10, then the total sum of your simultaneous attackers can not be more than
30. You can not target an opponent if your size plus the opponent's
current attackers' sizes amount to more than 3 times the opponent's
size.

But there is an exception that says that under all circumstances, you
can always target someone who is only being targeted by 1 or zero, no
matter the sizes involved. Think of it this way - even if a gnome is
miniscule next to an ogre, two ogres can always attack a gnome
simultaneously from opposite sides.

Even though many characters can target the same opponent under the
constraints outlined above, a single character can never target more
than one other target at a time. So how do you defend against
multiple attackers, if you can only target one of them at a time?

Let's say you're attacked by three people, who all choose the thrust
Action. You choose the Action dodge. Your CompletionTime for the
dodge is computed to 20 "ticks", which means that 20 ticks into the
turn your dodge will become active. So, if the fastest attacker's
CompletionTime is 25, he will miss. But now you will need some recovery
time before you can dodge again, and that recovery time is your
CompletionTime divided by 2 (20 / 2 = 10). So, 10 ticks later, at
tick 35, your dodge becomes active again. If the second fastest
attacker's CompletionTime is less than 35, he will miss. Otherwise,
you will dodge his attack too.

So far so good. But with three attackers taking turns attacking you,
when will you ever get the chance to take an offensive Action so you
actually get a chance to hit them back?

To do this, you can use a special form of Action that is both
offensive and defensive such as riposte. A riposte is a parry
quickly followed by a counter-attack.

*** Formations - organized group combat
When characters form a group, they can optionally fight using
formations.  This means that they all stand in a fixed position in
relation to their fellow group members. The group leader can issue
commands to change formations or to have two characters swap positions
within the current formation. To comply with the order, the affected
individuals issue a special "comply" Movement command, which
automatically moves them to the correct position. If they don't issue
this command when ordered, they will be automatically removed from the
formation and thereby lose the benefits it provides.

When one formation attacks another, the individuals in the formations
will not be able to target whomever they please. If you are standing
in the middle of a line formation (let's say 5 characters standing in
a line, facing 90 degrees away from the direction of the line) and you're
fighting another group in the same formation, you can only target opponents
who are standing near the middle of their formation. And if you're standing
in the westernmost position in your line formation, you can only attack the
characters closest to the westernmost end of their line formation. The only
exception is if you're using ranged weaponry such as bows, crossbows or
long range spells.

One of the advantages of fighting in a formation is that when you do,
the limit on how many characters can attack you is reduzed from the
normal max of your size times 3, to your size times 2. This is because
you have friends standing next to you, guarding your flanks which
reduces the space available for your attackers. But this rule is
negated if your formation is only one rank thick, and you're attacked
both from the rear and the front at the same time.

There is also an advantage to not fighting in a formation however, and
that is that then each group member can choose their own targets
individually, instead of following their formation around and fighting
whomever they happen to end up in front of.

*** Multi-layered combat
Using this system, combat can be said to be fought in many layers. Let's
compare the characters to soldiers, and the groups to squads.

The individual soldiers are fighting man-to-man, on layer one.

The squad leaders are fighting on layer 2, trying to out-maneuver the
opposing squads using well-timed formation changes, perhaps trying to
outflank the opposing formation to get at their vulnerable casters in
the rear rank. They can also move individual soldiers around in the
formation, attempting to use each soldier where they do the most good.

Platoon leaders are fighting on layer 3, by telling their squad leaders
where to go and which groups to attack.


** Ideas
*** Sizes
| Size | Description                 | Animal                    |
|------+-----------------------------+---------------------------|
|    1 | Coin                        | Beetle, fly               |
|    2 | Fist-sized object, A4 paper | Squirrel, rat, small bird |
|    3 | Shortsword, book            | Rabbit                    |
|    4 | Longsword, shield           | Cat, large bird           |
|    5 | Dog                         | Dog, sheep, deer          |
|    6 | Dwarf                       | Wolf                      |
|    7 | Human                       | Pony, human               |
|    8 | Orc                         | Cow                       |
|    9 | Horse, bear                 | Horse, bear               |
|------+-----------------------------+---------------------------|
*** Bodies
**** Humanoid
****** Humanoid body configuration

           Head
            10%
             |
Right arm--Chest--Left arm
   10%      40%     10%
           /   \
  Right leg     Left leg
     15%           15%

The default target is always the chest, unless the attacker specifies
otherwise. If the attack misses its indended target, there's a chance
that it might hit another body part. To determine this, the
percentages of all other body parts are assembled into a table. Let's
say an attack aimed at the chest misses. Then, a table like this will
be assembled:

| Body part | Min | Max |
|-----------+-----+-----|
| Head      |   1 |  10 |
| Right arm |  11 |  20 |
| Left arm  |  21 |  30 |
| Right leg |  31 |  44 |
| Left leg  |  45 |  60 |
| Miss      |  61 | 100 |

A d100 is used to determine which body part is hit, if any.

However, the chest is a special case since it is "adjacent" to all
other body parts. If the body part is "further" away than that, it's
chance of being hit is halved (round downards) for each successive
"step". So if you aim at the head and miss, there's a 40% chance of
hitting the chest instead, but only a 7% chance (half of 15%) of
hitting the left leg.

*** Missile weapon accuracy (accuracy)
- Result = sr + accuracy + target's size - 10
